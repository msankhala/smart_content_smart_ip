<?php

/**
 * @file
 * Contains smart_content_smart_ip.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\smart_ip\SmartIp;

/**
 * Implements hook_help().
 */
function smart_content_smart_ip_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the smart_content_smart_ip module.
    case 'help.page.smart_content_smart_ip':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Smart Content Condition based on smart ip.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_block().
 */
function smart_content_smart_ip_preprocess_block(&$variables) {
  // Verify if the block is Smart Content Decision Block.
  if ($variables['base_plugin_id'] === 'smart_content_decision_block') {
    // Attach JS Library.
    $variables['#attached']['library'][] = 'smart_content_smart_ip/condtion.smart_ip';
    // Disable cache
    $variables['#cache']['max-age'] = 0;
    // \Drupal::service('page_cache_kill_switch')->trigger();
    // Set the visitor's IP address if available in cloudflare header otherwise
    // use default IP address.
    $ip_address = isset($_SERVER['HTTP_CF_CONNECTING_IP']) ? $_SERVER['HTTP_CF_CONNECTING_IP'] : '';
    // Pass variable to drupalSettings.
    // $variables['#attached']['library'][] = 'smart_content/smart_content';
    $variables['#attached']['drupalSettings']['smart_content_smart_ip'] = SmartIp::query($ip_address);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function smart_content_smart_ip_preprocess_page(&$variables) {
  // Check if ajax request and path is /ajax/smart_content/config_entit/*
  $request = \Drupal::request();
  $is_ajax = $request->isXmlHttpRequest();
  $path = $request->getPathInfo();
  // if ($is_ajax && strpos($path, "/ajax/smart_content/config_entity/") == 0) {
    // Disable Cache for Smart Content Decision Blocks
    // $variables['#cache']['max-age'] = 0;
    // $variables['#cache']['contexts'][] = 'session';

    // \Drupal::service('page_cache_kill_switch')->trigger();
  // }
}

